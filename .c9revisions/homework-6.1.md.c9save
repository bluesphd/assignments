{"ts":1380289146077,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"## Homework 6.1: Follow the Arrows!\n\n* Use your upstream remote to pull homework-6.1.md into your workspace on Cloud9 (hint: git pull upstream master).\n \n* Find a section in your projects that has some decent looping and branching code: at least five branches that you can diagram.\n* Copy-paste your example into homework-6.1.md and attempt to identify the loop conditions with comments e.g. \n\n```php\nwhile ( $count < $max ) {\n// while $count is less than $max\n\nforeach ( $collection as $item ) {\n// until there are no more $items in the $collection\"\n```\n\n* Save your file locally, git add and git commit it (don't forget: -m 'explain why!'), and git push your changes to your Github account.\n* **Bonus points:** open a pull request back to the original repo.\n"]],"start1":0,"start2":0,"length1":0,"length2":760}]],"length":760}
{"contributors":[],"silentsave":false,"ts":1380293802375,"patch":[[{"diffs":[[0,"l repo.\n"],[1,"\nif ( $wp_error->get_error_code() ) {\n\t\t$errors = '';\n\t\t$messages = '';\n\t\tforeach ( $wp_error->get_error_codes() as $code ) {\n\t\t\t$severity = $wp_error->get_error_data($code);\n\t\t\tforeach ( $wp_error->get_error_messages($code) as $error ) {\n\t\t\t\tif ( 'message' == $severity )\n\t\t\t\t\t$messages .= '\t' . $error . \"<br />\\n\";\n\t\t\t\telse\n\t\t\t\t\t$errors .= '\t' . $error . \"<br />\\n\";\n\t\t\t}\n\t\t}\n\t\tif ( !empty($errors) )\n\t\t\techo '<div id=\"login_error\">' . apply_filters('login_errors', $errors) . \"</div>\\n\";\n\t\tif ( !empty($messages) )\n\t\t\techo '<p class=\"message\">' . apply_filters('login_messages', $messages) . \"</p>\\n\";\n\t}\n} // End of login_header()"]],"start1":752,"start2":752,"length1":8,"length2":643}]],"length":1395,"saved":false}
{"contributors":[],"silentsave":false,"ts":1380896078933,"patch":[[{"diffs":[[0,"header()"],[1," \n"]],"start1":1387,"start2":1387,"length1":8,"length2":10}]],"length":1397,"saved":false}
{"contributors":[],"silentsave":false,"ts":1380903512558,"patch":[[{"diffs":[[0,"header()"],[-1," "],[0,"\n"],[1,"\n// Function declared in ubergallery program\n    private function _arrayPaginate($array, $resultsPerPage, $currentPage) {\n        // Page varriables\n        $totalElements = count($array);\n\n        if ($totalElements == 0) {\n\n            $paginatedArray = array();\n\n        } else {\n\n            if ($resultsPerPage <= 0 || $resultsPerPage >= $totalElements) {\n                $firstElement = 0;\n                $lastElement = $totalElements;\n                $totalPages = 1;\n            } else {\n                // Calculate total pages\n                $totalPages = ceil($totalElements / $resultsPerPage);\n\n                // Set current page\n                if ($currentPage < 1) {\n                    $currentPage = 1;\n                } elseif ($currentPage > $totalPages) {\n                    $currentPage = $totalPages;\n                } else {\n                    $currentPage = (integer) $currentPage;\n                }\n\n                // Calculate starting image\n                $firstElement = ($currentPage - 1) * $resultsPerPage;\n\n                // Calculate last image\n                if($currentPage * $resultsPerPage > $totalElements) {\n                    $lastElement = $totalElements;\n                } else {\n                    $lastElement = $currentPage * $resultsPerPage;\n                }\n            }\n\n            // Initiate counter\n            $x = 1;\n\n            // Run loop to paginate images and add them to array\n            foreach ($array as $key => $element) {\n\n                // Add image to array if within current page\n                if ($x > $firstElement && $x <= $lastElement) {\n                    $paginatedArray[$key] = $array[$key];\n                }\n\n                // Increment counter\n                $x++;\n            }\n\n        }\n\n        // Return paginated array\n        return $paginatedArray;\n    }\n    \n    // Code in ubergallery that calls the above function\n    // Paginate the array and return current page if enabled\n        if ($paginate == true && $this->_config['img_per_page'] > 0) {\n            $dirArray = $this->_arrayPaginate($dirArray, $this->_config['img_per_page'], $this->_page);\n    // $dirArray is 1st argument in function _arraypaginate named $array and will be used inside the fuction code\n    // $this etc is 2nd argument, and $this etc is the 3rd argument"]],"start1":1387,"start2":1387,"length1":10,"length2":2348}]],"length":3735,"saved":false}
