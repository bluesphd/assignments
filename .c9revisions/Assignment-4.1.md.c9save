{"ts":1379079444879,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1379083883114,"patch":[[{"diffs":[[1,"\n\n<?php\n\n/**\n * UberGallery is an easy to use, simple to manage, web photo gallery written in\n * PHP. UberGallery does not require a database and supports JPEG, GIF and PNG\n * file types. Simply upload your images and UberGallery will automatically\n * generate thumbnails and output standards complaint XHTML markup on the fly.\n *\n * This software is distributed under the MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * More info available at http://www.ubergallery.net\n *\n * @author Chris Kankiewicz <Chris@ChrisKankiewicz.com>\n * @copyright Copyright (c) 2013 Chris Kankiewicz (http://www.chriskankiewicz.com)\n * @license http://www.opensource.org/licenses/mit-license.php MIT License\n * @link https://github.com/UberGallery/UberGallery Cannonical source URL\n */\nclass UberGallery {\n\n    // Define application version\n    const VERSION = '2.4.4';\n\n    // Reserve some variables\n    protected $_config     = array();\n    protected $_imgDir     = NULL;\n    protected $_appDir     = NULL;\n    protected $_index      = NULL;\n    protected $_rThumbsDir = NULL;\n    protected $_rImgDir    = NULL;\n    protected $_now        = NULL;\n\n\n    /**\n     * UberGallery construct function. Runs on object creation.\n     */\n    public function __construct() {\n\n        // Get timestamp for the current time\n        $this->_now = time();\n\n        // Sanitize input and set current page\n        if (isset($_GET['page'])) {\n            $this->_page = (integer) $_GET['page'];\n        } else {\n            $this->_page = 1;\n        }\n\n        // Set class directory constant\n        if(!defined('__DIR__')) {\n            define('__DIR__', dirname(__FILE__));\n        }\n\n        // Set application directory\n        $this->_appDir = __DIR__;\n\n        // Set configuration file path\n        $configPath = $this->_appDir . '/galleryConfig.ini';\n\n        // Read and apply gallery config or throw error on fail\n        if (file_exists($configPath)) {\n            // Parse gallery configuration\n            $config = parse_ini_file($configPath, true);\n\n            // Apply configuration\n            $this->setCacheExpiration($config['basic_settings']['cache_expiration']);\n            $this->setPaginatorThreshold($config['basic_settings']['paginator_threshold']);\n            $this->setThumbSize($config['basic_settings']['thumbnail_width'], $config['basic_settings']['thumbnail_height']);\n            $this->setThumbQuality($config['basic_settings']['thumbnail_quality']);\n            $this->setThemeName($config['basic_settings']['theme_name']);\n            $this->setSortMethod($config['advanced_settings']['images_sort_by'], $config['advanced_settings']['reverse_sort']);\n            $this->setDebugging($config['advanced_settings']['enable_debugging']);\n            $this->setCacheDirectory($this->_appDir . '/cache');\n\n            if ($config['basic_settings']['enable_pagination']) {\n                $this->setImagesPerPage($config['advanced_settings']['images_per_page']);\n            } else {\n                $this->setImagesPerPage(0);\n            }\n\n        } else {\n            die(\"Unable to read galleryConfig.ini, please make sure the file exists at: <pre>{$configPath}</pre>\");\n        }\n\n        // Get the relative thumbs directory path\n        $this->_rThumbsDir = $this->_getRelativePath(getcwd(), $this->_config['cache_dir']);\n\n        // Check if cache directory exists and create it if it doesn't\n        if (!file_exists($this->_config['cache_dir'])) {\n            $this->setSystemMessage('error', \"Cache directory does not exist, please manually create it.\");\n        }\n\n        // Check if cache directory is writeable and warn if it isn't\n        if (!is_writable($this->_config['cache_dir'])) {\n            $this->setSystemMessage('error', \"Cache directory needs write permissions. If all else fails, try running: <pre>chmod 777 {$this->_config['cache_dir']}</pre>\");\n        }\n\n        // Set debug log path\n        $this->_debugLog = $this->_config['cache_dir'] . '/debug.log';\n\n        // Set up debugging if enabled\n        if ($this->_config['debugging']) {\n\n            // Initialize log if it doesn't exist\n            if (!file_exists($this->_debugLog)) {\n\n                // Get libgd info\n                $gd = gd_info();\n\n                // Get system and package info\n                $timestamp  = date('Y-m-d H:i:s');\n                $ugVersion  = 'UberGallery v' . UberGallery::VERSION;\n                $phpVersion = 'PHP: ' . phpversion();\n                $gdVersion  = 'GD: ' . $gd['GD Version'];\n                $osVersion  = 'OS: ' . PHP_OS;\n\n                // Combine all the things!\n                $initText = $timestamp . ' / ' . $ugVersion . ' / ' . $phpVersion . ' / ' . $gdVersion . ' / ' . $osVersion . PHP_EOL;\n\n                // Create file with initilization text\n                file_put_contents($this->_debugLog, $initText, FILE_APPEND);\n            }\n\n            // Set new error handler\n            set_error_handler(\"UberGallery::_errorHandler\");\n\n        }\n\n    }\n\n\n    /**\n     * Special init method for simple one-line interface\n     *\n     * @return reflection\n     * @access public\n     */\n    public static function init() {\n        $reflection = new ReflectionClass(__CLASS__);\n        return $reflection->newInstanceArgs(func_get_args());\n    }\n\n\n    /**\n     * Returns pre-formatted XHTML of a gallery\n     *\n     * @param string $directory Relative path to images directory\n     * @param string $relText Text to use as the rel value\n     * @return object Self\n     * @access public\n     */\n    public function createGallery($directory, $relText = 'colorbox') {\n\n        // Get the gallery data array and set the template path\n        $galleryArray = $this->readImageDirectory($directory);\n        $templatePath = $this->_appDir . '/templates/defaultGallery.php';\n\n        // Set the relative text attribute\n        $galleryArray['relText'] = $relText;\n\n        // Echo the template contents\n        echo $this->readTemplate($templatePath, $galleryArray);\n\n        return $this;\n\n    }\n\n\n    /**\n     * Returns an array of files and stats of the specified directory\n     *\n     * @param string $directory Relative path to images directory\n     * @return array File listing and statistics for specified directory\n     * @access public\n     */\n"]],"start1":0,"start2":0,"length1":0,"length2":6321}]],"length":6321,"saved":false}
{"ts":1379085315406,"patch":[[{"diffs":[[0,"   * @access public\n     */\n"],[1,"// well documented and fairly easy to follow what the code is doing"]],"start1":6293,"start2":6293,"length1":28,"length2":95}]],"length":6388,"saved":false}
